<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: developer tools | Sid's Blog]]></title>
  <link href="http://siddharth-pandey.github.io/blog/categories/developer-tools/atom.xml" rel="self"/>
  <link href="http://siddharth-pandey.github.io/"/>
  <updated>2015-01-22T16:50:31+00:00</updated>
  <id>http://siddharth-pandey.github.io/</id>
  <author>
    <name><![CDATA[Siddharth Pandey]]></name>
    <email><![CDATA[siddharthkpandey@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to customize Chrome Developer Tools?]]></title>
    <link href="http://siddharth-pandey.github.io/blog/2014/09/10/how-to-customize-chrome-developer-tools/"/>
    <updated>2014-09-10T10:22:10+01:00</updated>
    <id>http://siddharth-pandey.github.io/blog/2014/09/10/how-to-customize-chrome-developer-tools</id>
    <content type="html"><![CDATA[<p>I spend most of my programming time within Visual Studio and I never liked the white theme that came out of the box. Same is with the Chrome Developer Tools. I use Dark theme for Visual Studio and want something similar for Chrome as well.</p>

<p>In version 32, custom.css was removed from Chrome. I&rsquo;ll be using an theme extension to setup a custom theme. The old way was to play with a local css file that you can rely on or add your own files.</p>

<!-- more -->


<p>There are many extensions which can help you to have this customization. For my purpose, I&rsquo;m going to use <a href="https://chrome.google.com/webstore/detail/devtools-theme-zero-dark/bomhdjeadceaggdgfoefmpeafkjhegbo">DevTools Theme: Zero Dark Matrix</a>. Click on the link and install it to add it to Chrome.</p>

<p>Follow the steps below:
 - You need to enable a feature by navigating to <a href="chrome://flags/#enable-devtools-experiments">chrome://flags/#enable-devtools-experiments</a>.
 - Once enabled, restart chrome.
 - Open Developer Tools and select Settings or gear icon at top right corner.
 - You should see an Experiments tab there, now enable <strong>Allow Custom User Themes.</strong>
 - Reload Developer Tools and you should now have the extension theme enabled.</p>

<p>See it was that easy to have a dark theme. However, if you want to create your own custom style, you will need to create your own extension. You could of course also just change the installed extension stylesheet, but you might want to check the licensing for whether its allowed or not!</p>

<p>If you have followed all the steps above, your developer tools will look like:</p>

<p><img class="center" src="/images/chrome_dev_tools_dark_theme.png" title="&lsquo;Dark Theme for Chrome Dev Tools&rsquo; &lsquo;images&rsquo;" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Umbraco Cheat Sheet for V4.7.1+ Dynamic-Nodes & v6+ MVC Razor Cheatsheets]]></title>
    <link href="http://siddharth-pandey.github.io/blog/2013/11/12/umbraco-cheat-sheet-for-v471-dynamic/"/>
    <updated>2013-11-12T00:00:00+00:00</updated>
    <id>http://siddharth-pandey.github.io/blog/2013/11/12/umbraco-cheat-sheet-for-v471-dynamic</id>
    <content type="html"><![CDATA[<p>Below are the links to download cheat sheets for umbraco which I have found really useful:</p>

<ul>
<li><a href="http://our.umbraco.org/projects/developer-tools/razor-dynamicnode-cheat-sheet">Razor DynamicNode Cheat Sheet</a></li>
<li><a href="http://our.umbraco.org/projects/developer-tools/umbraco-v6-mvc-razor-cheatsheets">Umbraco v6 MVC Razor Cheat Sheet</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Must Have Developer Tools! Some tricks to develop quicker]]></title>
    <link href="http://siddharth-pandey.github.io/blog/2012/12/20/must-have-developer-tools-some-tricks/"/>
    <updated>2012-12-20T00:00:00+00:00</updated>
    <id>http://siddharth-pandey.github.io/blog/2012/12/20/must-have-developer-tools-some-tricks</id>
    <content type="html"><![CDATA[<p><strong>Google Developer Tools, Some tricks to develop quicker</strong></p>

<ol>
<li>View Source => By going through menu navigation or Ctrl-Shit-I on windows or Cmd-option(alt)-I on mac.</li>
<li>Or for particular element, just right click on it and choose inspect element.</li>
<li>For fast navigation, prefer keyboard arrow keys to collapse or expand DOM elements. You will find the width and height of that active element as you move in Developer Tool.</li>
<li>To get the full view of the page, try Ctrl - (minus) to zoom out so as to see your whole page with developer tools open without scrolling. Sometimes useful to me.</li>
</ol>


<!-- more -->


<ol>
<li>You can copy the the content or the DOM elements by using your mouse, but you might like to do this by using console&rsquo;s copy() method. For example, copy(document.body.innerText) and then paste that anywhere. Its handy if you know the DOM element and may help for productivity.</li>
<li>Use clear(); function to clear the console, however the developer tool has a GUI for that.</li>
<li>Use inspect(body) to inspect body element of the DOM, just pass any element in the function.</li>
<li>Also, you can use $0 to access the element that is selected in the DOM in a console. So, Â you can pass $( $0 ) for jquery method where an anchor tag was selected in your DOM, so it means you are accessing that anchor method.</li>
<li>Under Network tab, the blue line in the waterfall chart shows that the DOM is ready or the DOMContentLoaded Event fire and the read line shows the windows load event which waits for the documents to load images, iframes, etc.</li>
<li>You an see the cookies information by going through the Network tab and then selecting Header or Cookies tab.</li>
<li>For javascript debugging, we can edit the script file of the page on the fly and it will render it as this feature is unique to Chrome because of its V8 JavaScript engine.</li>
<li>Sometimes, its hard for us to find where the error is in our script, so you might want to open the script in developer tools and then click the pause button, now chrome will set a breakpoint when it find the statement because of which the error is being logged in console.</li>
</ol>

]]></content>
  </entry>
  
</feed>
