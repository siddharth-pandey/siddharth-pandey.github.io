<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C# | Sid's Blog]]></title>
  <link href="http://siddharth-pandey.github.io/blog/categories/c-number/atom.xml" rel="self"/>
  <link href="http://siddharth-pandey.github.io/"/>
  <updated>2015-01-08T10:39:42+00:00</updated>
  <id>http://siddharth-pandey.github.io/</id>
  <author>
    <name><![CDATA[Siddharth Pandey]]></name>
    <email><![CDATA[siddharthkpandey@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introduction to Inversion of Control]]></title>
    <link href="http://siddharth-pandey.github.io/blog/2015/01/06/introduction-to-inversion-of-control/"/>
    <updated>2015-01-06T19:42:43+00:00</updated>
    <id>http://siddharth-pandey.github.io/blog/2015/01/06/introduction-to-inversion-of-control</id>
    <content type="html"><![CDATA[<p><strong>What is Inversion of Control (IoC)?</strong>
IoC is basically a pattern that we use to apply Depenency Inversion Principle.
Most people mix DIP, IoC and DI together! Its good to have your concepts clear.</p>

<p><strong>How does IoC relate to DIP?</strong>
Please read <a href="http://siddharth-pandey.github.io/blog/2014/12/23/Introduction-to-dependency-inversion-principle/">my post about DIP</a>. This priciple says that the high level module should not depend on low level module.</p>

<!-- more -->


<p>It doesn&rsquo;t really says how to do it.
Basically, as discussed above, IoC is the concept or pattern(ish) that we use to define how DIP can be achieved.</p>

<p>Types of Inversion that can be used:</p>

<ul>
<li>Control over the interface between two systems or components: Interface Inversion</li>
<li>Control over the flow of an application: Flow Inversion</li>
<li>Control over dependency creating and binding: Dependency Creation or Binding Inversion. Dependency Injection is one of the way to invert control under this Dependency Creation type.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Dependency Inversion Principle]]></title>
    <link href="http://siddharth-pandey.github.io/blog/2015/01/03/Introduction-to-dependency-inversion-principle/"/>
    <updated>2015-01-03T22:40:12+00:00</updated>
    <id>http://siddharth-pandey.github.io/blog/2015/01/03/Introduction-to-dependency-inversion-principle</id>
    <content type="html"><![CDATA[<p>Vocabulary required for this article:</p>

<ul>
<li>Dependency Inversion Principle (DIP): This is a principle used in architecting software.</li>
<li>Inversion of Control (IoC): This is a pattern used to invert interfaces, flow and dependencies.</li>
<li>Dependency Injection (DI): This is the implementation of IoC to invert dependencies.</li>
<li>Inversion of Control Container: A framework to do dependency injection.</li>
<li>Interface: The term interface will refer to externally exposed way to interact with something.</li>
</ul>


<p><strong>What is Dependency Inversion Principle?</strong></p>

<p>Many developers gets confuse and mix up the terms like DIP, IoC and DI without even understanding the concepts. The root that one needs to know is DIP. It basically states that <strong>instead of lower level modules defining an interface that higher level modules depend on, higher level modules define an interface/abstraction that lower level modules implement.</strong></p>

<!-- more -->


<p>There are two scenarios in the above concept that we can discuss:</p>

<ul>
<li><p>Scenario-1 When lower level modules define an interface that higher level modules depends on: In this case, we will have to change/modify higher level module whenever we modify existing or add new lower level modules with their interface which is not good. For example, lower level modules can be database or service class which may define their interface. In this case, higher level module will have to be changed whenever we modify lower classes.</p></li>
<li><p>Scenario-2 When higher level module defins an interface that lower level modules implement. In this case, we invert the dependency so that higher level module defines the interface which lower level modules implements i.e. lower level class needs to obey that interface. In this case, high level and low level class both depends on the interface that is defined by the high level class. Say suppose, if we want to add new low level class, it must obey the interface if it wants to be used by high level class. In this way we have inverted the dependency and high level class now controls the usage. Both depends on the interface and now high level class doesn&rsquo;t needs to be changed even in we add low level class with their own implementations.</p></li>
</ul>


<p><strong>Bob Martin&rsquo;s Paper</strong></p>

<p><a href="http://www.objectmentor.com/resources/articles/dip.pdf">Read his Article in C++ Report May 1996 as he invented this principle and also gave some examples.</a></p>

<p>Here is an summary of what Uncle Bob said:</p>

<ul>
<li>High-level modules should not depend on low-level modules. Both should depend on abstractions.</li>
<li>Abstractions should not depend upon details. Details should depend upon abstractions.</li>
</ul>


<p>He also gave these examples in his paper:</p>

<ul>
<li><strong>The Copy Program</strong>: <a href="https://github.com/siddharth-pandey/TheCopyProgram">This is the link to view and download sample console application</a> that discuss the concept of DIP with a simple Copy Program.</li>
<li><strong>Layering</strong>: Say suppose you have an application with layers in it for example, Policy Layer (pl), Mechanism Layer (ml), Utility Layer (ul) in decreasing order of levels i.e. pl calls ml and ml calls ul which means pl depends on ml and ml depends on ul directly. Any changes in ul will add some changes to be done in ml and thus, in pl. This is not a good software design as when a low level module is changed, high level modules needs to be changed which will happen a lot of time during the life time of the project. With the help of DIP, Uncle Bob defines an interface for each layer. For example, pl defines a Mechanism Interface which any layer can implement if it wants itself to be consumed by pl. In our case, its ml. And similarly, ml defines a Utility Interface which ul can obey. So, now the layers don&rsquo;t depend on each other directly, instead the depend on the abstraction defined by high level modules. Any changes to the lower level modules will not effect high level modules because they will obey the abstractions defined by the high level module. So using this concept, we can provide different implementation for Mechanism (ml-2) just by implementing Mechanism Interface and this will not effect pl in any manner.</li>
<li><strong>Button/Lamp (Inverted)</strong>: Uncle Bob gave an example of a button directly depending on lamp in which case, button that has a on and off behaviour will not be reusable as it directly depends on a lamp. So, with the help of DIP, he adds a <code>IButtonClient</code> which <code>Button</code> and <code>Lamp</code> depends on. IButtonClient has On and Off method members using which Button defines a basic abstraction of general on and off behaviour and can act as a base class. Different kind of buttons can then either use Button as abstract class or IButtonClient to provide a different implementation if they want. In this way, both will not depend on each other directly and will also have no effect if the other is modified. That means, they both are reusable. Now, any device like lamp, mobile, computer, etc. can just implement IButtonClient and now they have on and off behaviour of Button deriving from Button abstract class. Here we have created double abstraction by using interface as well as an abstract class.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Compress, Decompress a String in C# Using GZipStream?]]></title>
    <link href="http://siddharth-pandey.github.io/blog/2014/09/15/How-to-compress-decompress-a-string-in-c-using-GZipStream/"/>
    <updated>2014-09-15T12:37:12+01:00</updated>
    <id>http://siddharth-pandey.github.io/blog/2014/09/15/How-to-compress-decompress-a-string-in-c-using-GZipStream</id>
    <content type="html"><![CDATA[<p>I recently had a scenario where my application was sending raw json data to send to the browser in string format. This data was used as a viewstate by using hidden input element. When the app started to run in production envrionment, we realised that this raw data is very big in size and needs to be compressed.</p>

<p>So, the only solution available here was to compress the raw data and decompress it when app wants to access the data. Both needs to happen server-side. My app uses .NET v4.5, so I thought to use the out of the box classL <a href="http://msdn.microsoft.com/en-us/library/system.io.compression.gzipstream.aspx">GZipStream</a></p>

<!-- more -->


<p>Below is the code for compress and decompress feature:</p>

<pre><code>    /// &lt;summary&gt;
    /// Represents a class that can be consumed to compress/decompress string.
    /// &lt;/summary&gt;
    public static class Compressor
    {
        /// &lt;summary&gt;
        /// Use this to compress UTF-8 string to Base-64 string.
        /// &lt;/summary&gt;
        /// &lt;param name="text"&gt;The string value to compress.&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static string Compress(this string text)
        {
            var buffer = Encoding.UTF8.GetBytes(text);
            var memoryStream = new MemoryStream();
            using (var stream = new GZipStream(memoryStream, CompressionMode.Compress, true))
            {
                stream.Write(buffer, 0, buffer.Length);
            }
            memoryStream.Position = 0;
            var compressed = new byte[memoryStream.Length];
            memoryStream.Read(compressed, 0, compressed.Length);
            var gZipBuffer = new byte[compressed.Length + 4];
            Buffer.BlockCopy(compressed, 0, gZipBuffer, 4, compressed.Length);
            Buffer.BlockCopy(BitConverter.GetBytes(buffer.Length), 0, gZipBuffer, 0, 4);
            return Convert.ToBase64String(gZipBuffer);
        }

        /// &lt;summary&gt;
        /// Use this to decompress Base-64 string to UTF-8 string.
        /// &lt;/summary&gt;
        /// &lt;param name="compressedText"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static string Decompress(this string compressedText)
        {
            var gZipBuffer = Convert.FromBase64String(compressedText);
            using (var memoryStream = new MemoryStream())
            {
                int dataLength = BitConverter.ToInt32(gZipBuffer, 0);
                memoryStream.Write(gZipBuffer, 4, gZipBuffer.Length - 4);
                var buffer = new byte[dataLength];
                memoryStream.Position = 0;
                using (var gZipStream = new GZipStream(memoryStream, CompressionMode.Decompress))
                {
                    gZipStream.Read(buffer, 0, buffer.Length);
                }
                return Encoding.UTF8.GetString(buffer);
            }
        }

    }
</code></pre>

<p>The above utitlity helper can be used in following way:</p>

<pre><code>    // to compress rawData object's value.
    var dataToPersist = Compressor.Compress(JsonConvert.SerializeObject(rawData));

    // to decompress the dataToPersist in particular type.
    var data = JsonConvert.DeserializeObject&lt;Type&gt;(Compressor.Decompress(dataToPersist));
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Get Version or Product Details From a .dll File or Running Application?]]></title>
    <link href="http://siddharth-pandey.github.io/blog/2014/08/28/how-to-get-version-or-product-details-from-a-dll-file-or-running-application/"/>
    <updated>2014-08-28T15:54:26+01:00</updated>
    <id>http://siddharth-pandey.github.io/blog/2014/08/28/how-to-get-version-or-product-details-from-a-dll-file-or-running-application</id>
    <content type="html"><![CDATA[<p>I came across a scenario where I had to access some information from a file with <code>.dll</code> extension. And then I thought to write this post. This information may include that assembly&rsquo;s product name, product version, file version etc.
This scenario may be required either to read a <code>.dll</code> file from disk or from the current running application. The code below covers both the scenarios:</p>

<pre><code>// From executing application.
string assemblyVersion = Assembly.GetExecutingAssembly().GetName().Version.ToString();

// From a physical file, provide full path to that file.
string assemblyVersion = Assembly.LoadFile('your assembly file').GetName().Version.ToString();

// From executing application, gives file version.
string fileVersion = FileVersionInfo.GetVersionInfo(Assembly.GetExecutingAssembly().Location).FileVersion;

// From executing application, gives product version.
string productVersion = FileVersionInfo.GetVersionInfo(Assembly.GetExecutingAssembly().Location).ProductVersion;
</code></pre>

<!-- more -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Umbraco Cheat Sheet for V4.7.1+ Dynamic-Nodes & V6+ MVC Razor Cheatsheets]]></title>
    <link href="http://siddharth-pandey.github.io/blog/2013/11/12/umbraco-cheat-sheet-for-v471-dynamic/"/>
    <updated>2013-11-12T00:00:00+00:00</updated>
    <id>http://siddharth-pandey.github.io/blog/2013/11/12/umbraco-cheat-sheet-for-v471-dynamic</id>
    <content type="html"><![CDATA[<p>Below are the links to download cheat sheets for umbraco which I have found really useful:</p>

<ul>
<li><a href="http://our.umbraco.org/projects/developer-tools/razor-dynamicnode-cheat-sheet">Razor DynamicNode Cheat Sheet</a></li>
<li><a href="http://our.umbraco.org/projects/developer-tools/umbraco-v6-mvc-razor-cheatsheets">Umbraco v6 MVC Razor Cheat Sheet</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
