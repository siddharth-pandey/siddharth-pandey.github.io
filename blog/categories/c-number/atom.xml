<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C# | Sid's Blog]]></title>
  <link href="http://siddharth-pandey.github.io/blog/categories/c-number/atom.xml" rel="self"/>
  <link href="http://siddharth-pandey.github.io/"/>
  <updated>2014-12-24T18:41:57+00:00</updated>
  <id>http://siddharth-pandey.github.io/</id>
  <author>
    <name><![CDATA[Siddharth Pandey]]></name>
    <email><![CDATA[siddharthkpandey@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introduction to Dependency Inversion Principle]]></title>
    <link href="http://siddharth-pandey.github.io/blog/2014/12/23/Introduction-to-dependency-inversion-principle/"/>
    <updated>2014-12-23T22:40:12+00:00</updated>
    <id>http://siddharth-pandey.github.io/blog/2014/12/23/Introduction-to-dependency-inversion-principle</id>
    <content type="html"><![CDATA[<p>Vocabulary required for this article:</p>

<ul>
<li>Dependency Inversion Principle (DIP): This is a principle used in architecting software.</li>
<li>Inversion of Control (IoC): This is a pattern used to invert interfaces, flow and dependencies.</li>
<li>Dependency Injection (DI): This is the implementation of IoC to invert dependencies.</li>
<li>Inversion of Control Container: A framework to do dependency injection.</li>
<li>Interface: The term interface will refer to externally exposed way to interact with something.</li>
</ul>


<p><strong>What is Dependency Inversion Principle?</strong></p>

<p>Many developers gets confuse and mix up the terms like DIP, IoC and DI without even understanding the concepts. The root that one needs to know is DIP. It basically states that <strong>instead of lower level modules defining an interface that higher level modules depend on, higher level modules define an interface/abstraction that lower level modules implement.</strong></p>

<!-- more -->


<p>There are two scenarios in the above concept that we can discuss:</p>

<ul>
<li><p>Scenario-1 When lower level modules define an interface that higher level modules depends on: In this case, we will have to change/modify higher level module whenever we modify existing or add new lower level modules with their interface which is not good. For example, lower level modules can be database or service class which may define their interface. In this case, higher level module will have to be changed whenever we modify lower classes.</p></li>
<li><p>Scenario-2 When higher level module defins an interface that lower level modules implement. In this case, we invert the dependency so that higher level module defines the interface which lower level modules implements i.e. lower level class needs to obey that interface. In this case, high level and low level class both depends on the interface that is defined by the high level class. Say suppose, if we want to add new low level class, it must obey the interface if it wants to be used by high level class. In this way we have inverted the dependency and high level class now controls the usage. Both depends on the interface and now high level class doesn&rsquo;t needs to be changed even in we add low level class with their own implementations.</p></li>
</ul>


<p><strong>Bob Martin&rsquo;s Paper</strong></p>

<p><a href="http://www.objectmentor.com/resources/articles/dip.pdf">Read his Article in C++ Report May 1996 as he invented this principle and also gave some examples.</a></p>

<p>Here is an summary of what Uncle Bob said:</p>

<ul>
<li>High-level modules should not depend on low-level modules. Both should depend on abstractions.</li>
<li>Abstractions should not depend upon details. Details should depend upon abstractions.</li>
</ul>


<p>He also gave these examples in his paper:</p>

<ul>
<li><strong>The Copy Program</strong>: <a href="https://github.com/siddharth-pandey/TheCopyProgram">This is the link to view and download sample console application</a> that discuss the concept of DIP with a simple Copy Program.</li>
<li><strong>Layering</strong>: Say suppose you have an application with layers in it for example, Policy Layer (pl), Mechanism Layer (ml), Utility Layer (ul) in decreasing order of levels i.e. pl calls ml and ml calls ul which means pl depends on ml and ml depends on ul directly. Any changes in ul will add some changes to be done in ml and thus, in pl. This is not a good software design as when a low level module is changed, high level modules needs to be changed which will happen a lot of time during the life time of the project. With the help of DIP, Uncle Bob defines an interface for each layer. For example, pl defines a Mechanism Interface which any layer can implement if it wants itself to be consumed by pl. In our case, its ml. And similarly, ml defines a Utility Interface which ul can obey. So, now the layers don&rsquo;t depend on each other directly, instead the depend on the abstraction defined by high level modules. Any changes to the lower level modules will not effect high level modules because they will obey the abstractions defined by the high level module. So using this concept, we can provide different implementation for Mechanism (ml-2) just by implementing Mechanism Interface and this will not effect pl in any manner.</li>
<li><strong>Button/Lamp (Inverted)</strong>: Uncle Bob gave an example of a button directly depending on lamp in which case, button that has a on and off behaviour will not be reusable as it directly depends on a lamp. So, with the help of DIP, he adds a <code>IButtonClient</code> which <code>Button</code> and <code>Lamp</code> depends on. IButtonClient has On and Off method members using which Button defines a basic abstraction of general on and off behaviour and can act as a base class. Different kind of buttons can then either use Button as abstract class or IButtonClient to provide a different implementation if they want. In this way, both will not depend on each other directly and will also have no effect if the other is modified. That means, they both are reusable. Now, any device like lamp, mobile, computer, etc. can just implement IButtonClient and now they have on and off behaviour of Button deriving from Button abstract class. Here we have created double abstraction by using interface as well as an abstract class.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Compress, Decompress a String in C# Using GZipStream?]]></title>
    <link href="http://siddharth-pandey.github.io/blog/2014/09/15/How-to-compress-decompress-a-string-in-c-using-GZipStream/"/>
    <updated>2014-09-15T12:37:12+01:00</updated>
    <id>http://siddharth-pandey.github.io/blog/2014/09/15/How-to-compress-decompress-a-string-in-c-using-GZipStream</id>
    <content type="html"><![CDATA[<p>I recently had a scenario where my application was sending raw json data to send to the browser in string format. This data was used as a viewstate by using hidden input element. When the app started to run in production envrionment, we realised that this raw data is very big in size and needs to be compressed.</p>

<p>So, the only solution available here was to compress the raw data and decompress it when app wants to access the data. Both needs to happen server-side. My app uses .NET v4.5, so I thought to use the out of the box classL <a href="http://msdn.microsoft.com/en-us/library/system.io.compression.gzipstream.aspx">GZipStream</a></p>

<!-- more -->


<p>Below is the code for compress and decompress feature:</p>

<pre><code>    /// &lt;summary&gt;
    /// Represents a class that can be consumed to compress/decompress string.
    /// &lt;/summary&gt;
    public static class Compressor
    {
        /// &lt;summary&gt;
        /// Use this to compress UTF-8 string to Base-64 string.
        /// &lt;/summary&gt;
        /// &lt;param name="text"&gt;The string value to compress.&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static string Compress(this string text)
        {
            var buffer = Encoding.UTF8.GetBytes(text);
            var memoryStream = new MemoryStream();
            using (var stream = new GZipStream(memoryStream, CompressionMode.Compress, true))
            {
                stream.Write(buffer, 0, buffer.Length);
            }
            memoryStream.Position = 0;
            var compressed = new byte[memoryStream.Length];
            memoryStream.Read(compressed, 0, compressed.Length);
            var gZipBuffer = new byte[compressed.Length + 4];
            Buffer.BlockCopy(compressed, 0, gZipBuffer, 4, compressed.Length);
            Buffer.BlockCopy(BitConverter.GetBytes(buffer.Length), 0, gZipBuffer, 0, 4);
            return Convert.ToBase64String(gZipBuffer);
        }

        /// &lt;summary&gt;
        /// Use this to decompress Base-64 string to UTF-8 string.
        /// &lt;/summary&gt;
        /// &lt;param name="compressedText"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static string Decompress(this string compressedText)
        {
            var gZipBuffer = Convert.FromBase64String(compressedText);
            using (var memoryStream = new MemoryStream())
            {
                int dataLength = BitConverter.ToInt32(gZipBuffer, 0);
                memoryStream.Write(gZipBuffer, 4, gZipBuffer.Length - 4);
                var buffer = new byte[dataLength];
                memoryStream.Position = 0;
                using (var gZipStream = new GZipStream(memoryStream, CompressionMode.Decompress))
                {
                    gZipStream.Read(buffer, 0, buffer.Length);
                }
                return Encoding.UTF8.GetString(buffer);
            }
        }

    }
</code></pre>

<p>The above utitlity helper can be used in following way:</p>

<pre><code>    // to compress rawData object's value.
    var dataToPersist = Compressor.Compress(JsonConvert.SerializeObject(rawData));

    // to decompress the dataToPersist in particular type.
    var data = JsonConvert.DeserializeObject&lt;Type&gt;(Compressor.Decompress(dataToPersist));
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Get Version or Product Details From a .dll File or Running Application?]]></title>
    <link href="http://siddharth-pandey.github.io/blog/2014/08/28/how-to-get-version-or-product-details-from-a-dll-file-or-running-application/"/>
    <updated>2014-08-28T15:54:26+01:00</updated>
    <id>http://siddharth-pandey.github.io/blog/2014/08/28/how-to-get-version-or-product-details-from-a-dll-file-or-running-application</id>
    <content type="html"><![CDATA[<p>I came across a scenario where I had to access some information from a file with <code>.dll</code> extension. And then I thought to write this post. This information may include that assembly&rsquo;s product name, product version, file version etc.
This scenario may be required either to read a <code>.dll</code> file from disk or from the current running application. The code below covers both the scenarios:</p>

<pre><code>// From executing application.
string assemblyVersion = Assembly.GetExecutingAssembly().GetName().Version.ToString();

// From a physical file, provide full path to that file.
string assemblyVersion = Assembly.LoadFile('your assembly file').GetName().Version.ToString();

// From executing application, gives file version.
string fileVersion = FileVersionInfo.GetVersionInfo(Assembly.GetExecutingAssembly().Location).FileVersion;

// From executing application, gives product version.
string productVersion = FileVersionInfo.GetVersionInfo(Assembly.GetExecutingAssembly().Location).ProductVersion;
</code></pre>

<!-- more -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Umbraco Cheat Sheet for V4.7.1+ Dynamic-Nodes & V6+ MVC Razor Cheatsheets]]></title>
    <link href="http://siddharth-pandey.github.io/blog/2013/11/12/umbraco-cheat-sheet-for-v471-dynamic/"/>
    <updated>2013-11-12T00:00:00+00:00</updated>
    <id>http://siddharth-pandey.github.io/blog/2013/11/12/umbraco-cheat-sheet-for-v471-dynamic</id>
    <content type="html"><![CDATA[<p>Below are the links to download cheat sheets for umbraco which I have found really useful:</p>

<ul>
<li><a href="http://our.umbraco.org/projects/developer-tools/razor-dynamicnode-cheat-sheet">Razor DynamicNode Cheat Sheet</a></li>
<li><a href="http://our.umbraco.org/projects/developer-tools/umbraco-v6-mvc-razor-cheatsheets">Umbraco v6 MVC Razor Cheat Sheet</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Test and Test Driven Development in ASP.NET MVC Application]]></title>
    <link href="http://siddharth-pandey.github.io/blog/2013/10/17/unit-test-and-test-driven-development/"/>
    <updated>2013-10-17T00:00:00+01:00</updated>
    <id>http://siddharth-pandey.github.io/blog/2013/10/17/unit-test-and-test-driven-development</id>
    <content type="html"><![CDATA[<p>This article aims to summarize the concept of testing which can help you while writing tests using any framework out there. I will be writing more on this topic and will also attach any relevant demo applications on github. </p>

<h3>Types of Testing</h3>

<p>There are many types of testing that you may want to apply to your application, namely:</p>

<ul>
<li>Unit Test &amp; Test Driven Development (TDD)</li>
<li>User Interface Testing</li>
<li>Integration Testing</li>
<li>Acceptance Testing </li>
<li>Performance Testing</li>
<li>Accessibility Testing</li>
<li>Security Testing</li>
</ul>


<!-- more -->


<h3>Testing with ASP.NET Web Forms</h3>

<p>If you are coming from ASP.NET Web Forms background and if you have done any testing in it, you may have find that it is not that easy to test your application because web forms aggregates and integrates the logic and the display i.e. view of your application. And this is what it makes testing very difficult.</p>

<h3>Testing with ASP.NET MVC</h3>

<p>The concept of Model View Controller (MVC) is designed by keeping testing in mind. The design of an application based on MVC concept makes an distinction to have a separate Model (data), the display of the application i.e. View and the Controller that has the logic to bind the Model to the View.</p>

<p>Below are some resources that you will need to test your MVC application:</p>

<ol>
<li>Visual Studio 2010/2012/Express 2013 (RC)</li>
<li>One of any testing software framework - nUnit or xUnit or MSTest.</li>
<li>Mocking Framwork - There are many free frameworks available out there but I&rsquo;m going to use the free version of JustMock.</li>
<li>You can also download nUnit Runner - that doesn&rsquo;t depend on Visual Studio and runs independently.</li>
</ol>


<h3>Caveat</h3>

<p>There are couple of Caveat that we need to discuss before discussing the key concepts of testing an application:</p>

<ol>
<li>There is no one right way to test.</li>
<li>Testing is something relatively new in the software development industry and people have different views to how to organize your tests, code, etc. This subject is open to discussion.</li>
<li>There is no one right way to refactor. You &amp; your team should adapt the same pattern of the way to refactor so as to run on the same track and make a good design of your application.</li>
<li>Best practices - even these are subjective. Stick to something what the community follows and then extend it as per your needs.</li>
</ol>


<h3>MVC and TDD</h3>

<h4>Unit Testing</h4>

<ol>
<li>Test a single unit - a Class or (better) a method.</li>
<li>Test in isolation of one another and to rest of the application. Test very small unit of functionality of your application.</li>
</ol>


<h4>TDD</h4>

<ol>
<li>Uses Unit Testing to drive the design of your application.</li>
<li>Is all about Test-First approach.</li>
<li><p>There is a term referred as Red Green Refactor, which means</p></li>
<li><p>Red Phase - create a failed test.</p></li>
<li>Green Phase - write just enough code to pass the above failed test.</li>
<li>Refactor Phase - clean up you code and then retest it to make sure your refactoring has not affected your test and it runs well.</li>
<li>Repeat  - repeat the above process again from Red - Green - Refactor phase.</li>
</ol>


<h4>Robert C. Martin&rsquo;s Laws - known as Uncle Bob in the community</h4>

<p>Uncle Bob has mentioned three laws to keep in mind while writing a successful TDD:</p>

<ol>
<li>Write no production code until you have written a failing test.</li>
<li>Write no more in your unit test then enough to make it fail.</li>
<li>Write no more production code then enough to make it pass.</li>
</ol>


<h4>Key points to remember whilst you write your First Test</h4>

<ol>
<li>Test one feature only.</li>
<li>Write the above test, run it and see it fail. It&rsquo;s very important to see it fail - because only by seeing it fail you can have the confidence when you see it pass that you have corrected the issue.</li>
<li><p>Fix only enough so that your test can pass. It&rsquo;s very important - don&rsquo;t get ahead of yourself to make a pass for your test anyway. As,</p></li>
<li><p>Remember <strong>YAGNI  </strong> - <strong>You Ain&rsquo;t Gonna Need It</strong> . Sometimes you often end up working and spending time on something that you won&rsquo;t need later, so, avoid that. </p></li>
<li>If no. 3 above is not followed then you are writing something which is not tested and may be will not be tested in the future as well as many of the code that you have written just makes pass for the test very easily.</li>
<li>Run your test and see it succeed.</li>
<li>Refactor and retest - to see your refactor has not broken the test.</li>
<li>Repeat the whole process from no. 1 above.</li>
</ol>


<h4>Asserts</h4>

<ol>
<li>It&rsquo;s a way to see if you have in fact succeed i.e. what you expect to be true.</li>
<li>Normally using any testing framework, you will find the keyword - &ldquo;Assert&rdquo; to make an assert of what you expect to be true.</li>
<li><strong>Rule to remember: You should have only one &ldquo;logical&rdquo; assert per test.</strong> It&rsquo;s fine to have on or more assert statement but logically you should test just one thing and to ensure what is reason that your test should fail.</li>
<li><p>There are many aspects that you can check while asserting namely,</p></li>
<li><p>Equality - AreEqual, AreNotEqual, etc.</p></li>
<li>Identity - AreSame, AreNotSame, Contains, etc.</li>
<li>Condition - IsTrue, IsFalse, IsNull, IsNotNull, IsNan, IsEmpty, IsNotEmpty, etc.</li>
<li>Type Checking - IsInstanceOf<t>, IsNotInstanceOf<t>, IsAssignableFrom<t>, etc.</t></t></t></li>
<li>Exception Throw or not thrown.</li>
<li>String - Contains, StartsWith, EndsWith, AreEqualIgnoringCase, IsMatch (regex), etc.</li>
<li>Collection - AllItemsAre&hellip; InstanceOfType, NotNull, Unique, Equal, Equivalent, etc.</li>
<li>File - AreEqual, AreNotEqual, etc.</li>
<li>Driectory - AreEqual, AreNotEqual, etc.</li>
<li>Asserts to force a result - Assert.Pass, Assert.Fail, Assert.Ignore, etc.</li>
</ol>


<h4>Red - Green Refactoring Cycle</h4>

<p><tbody>
<tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/-Neui5RASyE8/Ul-5UoulcjI/AAAAAAAAA5w/n7AVKYI7aKw/s1600/rgr.PNG" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="162" src="http://4.bp.blogspot.com/-Neui5RASyE8/Ul-5UoulcjI/AAAAAAAAA5w/n7AVKYI7aKw/s400/rgr.PNG" width="400"></a></td></tr>
<tr><td class="tr-caption" style="text-align: center;">Red - Green Refactoring Cycle</td></tr>
</tbody></p>

<h4>But how do you Refactor ?</h4>

<p>Uncle Bob says - Follow <strong>SOLID</strong></p>

<ol>
<li><p><strong>Single Responsibility: </strong></p></li>
<li><p>Exactly one reason for a Class/method to change.</p></li>
<li>One responsibility per Class/method.</li>
<li><p><strong>Open Closed Principle:</strong></p></li>
<li><p>Your Class should be open for extension, closed for modification.</p></li>
<li>Creates dependable api to your Class.</li>
<li>Derive but don&rsquo;t modify internals of your Class.</li>
<li><p><strong>Liskov Substitution Principle:</strong></p></li>
<li><p>Ability to replace instances with their sub-types at run-time.</p></li>
<li><p><strong>Interface Segregation Principle:</strong></p></li>
<li><p>No client should be forced to depend on method it doesn&rsquo;t use.</p></li>
<li>Create small interfaces.</li>
<li><p><strong>Dependency Inversion Principle:</strong></p></li>
<li><p>Depend on abstractions and not on concrete implementation. This is the art of dependency injection.</p></li>
</ol>


<h4>Key points to remember whilst Refactoring</h4>

<ol>
<li><p>Names matter</p></li>
<li><p>Spend time while naming</p></li>
<li>Renaming is very cheap - do it if you feel so.</li>
<li>Use meaningful names.</li>
<li>Don&rsquo;t be afraid of long names.</li>
<li>Make names pronounceable.</li>
<li>Classes = Nouns</li>
<li>Methods = Verbs</li>
<li>Collections are plural.</li>
<li><p>Avoid encoding:</p>

<ul>
<li>No Hungarian Notation</li>
<li>Interfaces do not begin with I.</li>
</ul>
</li>
<li>Functions/Methods should be small.</li>
<li>Do one thing &amp; do it well.</li>
<li><p>Avoid Switch Statements</p></li>
<li><p>Use derived types where possible.</p></li>
<li>Use Descriptive names - don&rsquo;t be afraid of long names.</li>
<li><p>Minimize number of parameters you pass to a method</p></li>
<li><p>Zero is ideal</p></li>
<li>One or two are workable</li>
<li>Three or more are too much cognitive load of understanding how your method works and those parameters interact. </li>
<li><strong>Don&rsquo;t Repeat Yourself (DRY)</strong></li>
<li><strong>YAGNI</strong></li>
<li>Structured Programming is dead - in a small method, multiple returns can clarify.</li>
<li><p>Use fewer &amp; smarter comments</p></li>
<li><p>To explain intent when obscure.</p></li>
<li>Use <strong>ToDo</strong> comments but no in production code.</li>
<li>Avoid most comments and fix the code instead.</li>
<li><p><strong>The Law Of Demeter</strong></p></li>
<li><p>Modules should not know about innards of objects.</p></li>
<li>Objects hide their data.</li>
<li>Objects expose their public methods.</li>
<li><p>Use Exceptions, not errors</p></li>
<li><p>Don&rsquo;t return null or pass null.</p></li>
<li>Classes should be small.</li>
<li>Single Responsibility should be applied to classes.</li>
<li><p>Refactor your Tests by keeping <strong>FIRST</strong> in mind</p></li>
<li><p><strong>Fast</strong></p>

<ul>
<li>Test should run quickly else you won&rsquo;t run it and then it has no value.</li>
</ul>
</li>
<li><p><strong>Independent</strong></p>

<ul>
<li>Order of the tests must not matter.</li>
<li>No dependencies between tests.</li>
</ul>
</li>
<li><p><strong>Repeatable</strong></p>

<ul>
<li>Running the same test twice should yield the same answer reliably.</li>
</ul>
</li>
<li><p><strong>Self-Validating</strong></p>

<ul>
<li>Tests should return Boolean: Pass or Fail but no ambiguity.</li>
</ul>
</li>
<li><p><strong>Timely</strong></p>

<ul>
<li>Tests should be written just before production code.</li>
</ul>
</li>
</ol>


<p>This was all about the concepts that you should keep in your mind while writing programs. Practice the above in your daily work and you will notice the difference it makes in your way to write applications.</p>

<p>Stay tuned for sample application to write tests with MVC.</p>
]]></content>
  </entry>
  
</feed>
